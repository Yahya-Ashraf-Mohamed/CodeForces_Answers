#include <iostream>
#include "./Linked List/LinkedList.h"
using namespace std;

int main() {

	LinkedList<int> L;	//create an object of class LinkedList
	int val, lastItem, Num;
	
    //================================================================================================================================================================//
	cout << "\nPlease enter int values to add to begining of the list (-1 to stop):\n";
	cin >> val;
	while (val != -1)
	{
	    L.InsertBeg(val);
	    cin >> val;
	}
	// Printing the list
	L.PrintList();
    //================================================================================================================================================================//



    //================================================================================================================================================================//
    // Deletes all nodes of the list.
    L.DeleteAll();
    L.PrintList();
    //================================================================================================================================================================//



    //================================================================================================================================================================//
    cout << "\nPlease enter int values to add to the end of the list (-1 to stop):\n";
    cin >> val;
    while (val != -1)
    {
        L.InsertEnd(val);
        cin >> val;
    }
    

    cout << "size of list is: " <<  L.Size() << endl;
    L.PrintList();
    //================================================================================================================================================================//
    


    //================================================================================================================================================================//
    //returns the value of the nth item(starting at 0 for first).
    cout << "the value at index 2 is: " << L.Value_at(2) << endl;

    //================================================================================================================================================================//



    //================================================================================================================================================================//
    //returns the value of front item.
    cout << "the value at the front is: " << L.Front() << endl;
    //================================================================================================================================================================//

    //================================================================================================================================================================//
    //returns the value in the back.
    cout << "the value at the end is: " << L.Back() << endl;
    //================================================================================================================================================================//


    //================================================================================================================================================================//
    //insert value at index, so current item at that index is pointed to by new item at index.
    cout << "Now Adding number 99 at index 2: " << endl;
    L.Insert(2, 99);
    L.PrintList();
    //================================================================================================================================================================//
    

    //================================================================================================================================================================//
    //returns the value of the node at nth position from the end of the list.
    cout << "the value at position 2 from the end is: " << L.Value_n_from_end(2) << endl;
    //================================================================================================================================================================//


    //================================================================================================================================================================//
    //removes node at given index.
    cout << "Now removing value at index 2" << endl;
    L.Erase(2);
    L.PrintList();
    //================================================================================================================================================================//


    //================================================================================================================================================================//
    //searches for a given value in the list, returns true if found; false otherwise.
    cout << "Now Searching for value: 99" << endl;
    cout << ((L.Find(99)) ? "Exist" : "Not Found");
    //================================================================================================================================================================//



    //================================================================================================================================================================//
    //returns how many times a certain value appeared in the list
    cout << "Enter the value you want to count its number of occerance: ";
    cin >> val;
    cout << L.CountOccurance(val) << endl;
    //================================================================================================================================================================//


	
    //================================================================================================================================================================//
    //Deletes the first node in the list
    cout << "Deleting the first node... " << endl;
    L.DeleteFirst();
    L.PrintList();
    //================================================================================================================================================================//


    //================================================================================================================================================================//
    //Deletes the last node in the list
    cout << "Deleting the last node..." << endl;
    L.DeleteLast();
    L.PrintList();
    //================================================================================================================================================================//


    //================================================================================================================================================================//
    //deletes the first node with the given value (if found)
    cout << "Enter the value you want to delete: ";
    cin >> val;
    L.DeleteNode(val);
    L.PrintList();
    //================================================================================================================================================================//



    //================================================================================================================================================================//
    //deletes ALL node with the given value (if found) and returns true
    //if not found, returns false
    cout << "Enter the value you want to delete ALL NODES: " << endl;
    cin >> val;
    cout << ((L.DeleteNodes(val))? "All done :)" : "Error!") << endl;
    L.PrintList();
    //================================================================================================================================================================//


    //================================================================================================================================================================//
    //Reverses the linked list (without allocating any new Nodes)
    cout << endl << "Now Reversing the list" << endl;
    L.Reverse();
    L.PrintList();
    //================================================================================================================================================================//
    

    //================================================================================================================================================================//
    //Merges the current list to another list L by making the last Node in the current list 
    //point to the first Node in list L
    LinkedList<int> L2;	//Create new LinkedList
    cout << "Creating Second list..." << endl;
    for (int i = 0; i < 5; i++)
    {
        L2.InsertEnd(i);
    }
    L2.PrintList();
    cout  << "Now Merging the two linked list" << endl;
    L.Merge(L2);
    L.PrintList();
    //================================================================================================================================================================//


    //================================================================================================================================================================//
    //A function that extracts the node with the min data value in a linked list.The function should
    //remove the node from the listand returns a pointer to it
    Node<int>* X = L.RemoveMin();
    L.PrintList();
    cout << "Min value is " <<  X->getItem() << " its Adress is " << X;
    //================================================================================================================================================================//


	return 0;
}

